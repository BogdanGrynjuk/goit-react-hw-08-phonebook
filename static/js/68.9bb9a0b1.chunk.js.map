{"version":3,"file":"static/js/68.9bb9a0b1.chunk.js","mappings":"yVAIaA,GAAOC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,yRAaJE,EAAQF,EAAAA,EAAAA,IAAH,kFAMLG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,mcAsBLK,EAAQL,EAAAA,EAAAA,MAAH,kOAYLM,EAAaN,EAAAA,EAAAA,IAAH,4GAMVO,EAASP,EAAAA,EAAAA,OAAH,seAwBNQ,GAAOR,EAAAA,EAAAA,GAAOS,EAAAA,IAAPT,CAAH,+N,UCfjB,EA9DkB,WAChB,IAAMU,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAY,mCAAG,8FAASC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAAhB,kBAEXC,EAAAA,EAAAA,SAA+B,CAAEF,MAAAA,EAAOC,SAAAA,GAAY,CAAEE,YAAY,IAFvD,OAGjBT,GAASU,EAAAA,EAAAA,IAAM,CAAEJ,MAAAA,EAAOC,SAAAA,KAHP,gDAKjB,KAAMI,MAAMC,SAAQ,SAAAC,GAClBC,EAAAA,OAAAA,QAAeD,EAAIE,QACpB,IAPgB,yDAAH,sDAWlB,OACE,SAAC,KAAD,CACEC,cAAe,CACbV,MAAO,GACPC,SAAU,IAEZU,SAAUZ,EALZ,UAOE,UAAChB,EAAD,YACE,UAACG,EAAD,YACE,UAACG,EAAD,oBAEE,SAACF,EAAD,CACEyB,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,YAAY,kCACZC,aAAa,cAGjB,SAAC1B,EAAD,8CAEF,UAACJ,EAAD,YACE,UAACG,EAAD,CACE4B,aAAc,kBAAMnB,GAAgB,EAAtB,EACdoB,aAAc,kBAAMpB,GAAgB,EAAtB,EAFhB,sBAKE,SAACX,EAAD,CACEyB,GAAG,WACHC,KAAMhB,EAAe,OAAS,WAC9BiB,KAAK,WACLC,YAAY,6BACZC,aAAa,yBAGjB,SAAC1B,EAAD,8DAEF,UAACC,EAAD,CAAQsB,KAAK,SAAb,oBAEE,SAACrB,EAAD,WAKT,ECpEY2B,EAAUnC,EAAAA,EAAAA,IAAH,ycAmBPoC,EAAQpC,EAAAA,EAAAA,GAAH,mECjBH,SAASqC,IACtB,OACE,UAACF,EAAD,YACE,SAACG,EAAA,EAAD,WACE,wCAEF,SAACF,EAAD,8BACA,SAAC,EAAD,MAGL,C,6FCZYG,EAAaC,EAAAA,KACvBC,SAAS,oBACTC,QACC,iMACA,8DAGSC,EAAcH,EAAAA,KACxBxB,MAAM,iBACNyB,SAAS,qBAECG,EAAiBJ,EAAAA,KAC3BC,SAAS,wBACTI,IAAI,EAAG,0CACPH,QACC,stBACA,yGAGSI,EAA2BN,EAAAA,KAAaO,MAAM,CACzDjB,KAAMS,EACNvB,MAAO2B,EACP1B,SAAU2B,IAGC1B,EAAwBsB,EAAAA,KAAaO,MAAM,CACtD/B,MAAO2B,EACP1B,SAAU2B,G","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login/Login.styled.jsx","pages/Login/Login.jsx","validations/authValidation.js"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { Field as FormikField, Form as FormikForm } from 'formik';\nimport { MdLogin } from 'react-icons/md';\n\nexport const Form = styled(FormikForm)`\n  display: flex; \n  flex-direction: column;\n  gap: 16px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: rgb(255, 255, 255);  \n  font-size: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: bold;  \n`;\n\nexport const Group = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const Field = styled(FormikField)`\n  padding: 4px 12px;\n  width: calc(100% - 24px);\n  max-width: 450px;\n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;  \n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n\n  @media screen and (min-width: 768px) {\n    &::placeholder{\n      text-align: center;\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 6px;\n  \n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    justify-content: space-between;\n  }  \n`;\n\nexport const HelperText = styled.div`\n  font-size: 11px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: normal;  \n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-left: auto;\n  padding: 4px;  \n  background-color: transparent;\n  border: none;\n  outline: none;  \n  font-size: 16px;\n  font-weight: normal;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {    \n    background-color: rgb(181, 245, 254);\n  }\n`;\n\nexport const Icon = styled(MdLogin)`\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  fill: rgb(0, 0, 255);\n  width: 16px;\n  height: 16px;\n  transition: box-shadow 250ms linear;\n`;","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { logIn } from 'redux/auth/operations';\nimport { loginValidationSchema } from 'validations/authValidation';\nimport { Form, Label, Field, Button, Icon, Group, HelperText } from './LoginForm.styled';\n\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleSubmit = async ({ email, password }) => {\n    try {\n      await loginValidationSchema.validate({ email, password }, { abortEarly: false })\n      dispatch(logIn({ email, password }));\n    } catch (error) {\n      error.inner.forEach(err => {\n        Notify.failure(err.message);\n      });\n    }\n  };  \n\n  return (  \n    <Formik\n      initialValues={{        \n        email: '',\n        password: '',\n      }}\n      onSubmit={handleSubmit}\n    >\n      <Form>        \n        <Group>\n          <Label>\n            Email\n            <Field\n              id='email'\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Please enter your email address\"\n              autoComplete=\"email\"\n            />\n          </Label>\n          <HelperText>Enter a valid email address</HelperText>\n        </Group>\n        <Group>\n          <Label\n            onMouseEnter={() => setShowPassword(true)}\n            onMouseLeave={() => setShowPassword(false)}\n          >\n            Password\n            <Field\n              id='password'\n              type={showPassword ? \"text\" : \"password\"}\n              name=\"password\"\n              placeholder=\"Please enter your password\"\n              autoComplete=\"current-password\"\n            />\n          </Label>\n          <HelperText>Password must contain at least 7 characters</HelperText>\n        </Group>        \n        <Button type=\"submit\">\n          Log In\n          <Icon/>\n        </Button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default LoginForm;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-width: calc(320px - 64px);   \n  padding: 16px;\n  border: 1px solid black;\n  border-radius: 4px;\n  text-align: start;\n  background-color: rgb(235, 235, 235);\n  box-shadow: 0 10px 10px rgba(0, 0, 0, 0.25),\n              0 10px 10px rgba(0, 0, 0, 0.25);\n\n  @media screen and (min-width: 768px) {\n    width: 100%;\n    max-width: calc(768px - 64px);    \n  }  \n`;\n\nexport const Title = styled.h1`\n  font-size: 28px;\n  text-align: center;\n`;","import { Helmet } from 'react-helmet';\nimport LoginForm from 'components/LoginForm';\nimport { Title, Wrapper } from './Login.styled';\n\nexport default function Login() {\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>      \n      <Title>Authentication</Title>\n      <LoginForm />\n    </Wrapper>\n  );\n}","import * as Yup from 'yup';\n\nexport const nameSchema = Yup.string()\n  .required('Name is required')\n  .matches(\n    /^[a-zA-Zа-яА-ЯіІїЇҐґ]+(([' -][a-zA-Zа-яА-ЯіІїЇҐґ ])?[a-zA-Zа-яА-ЯіІїЇҐґ]*)*$/u,\n    'Name may contain only letters, apostrophe, dash and spaces'\n  );\n\nexport const emailSchema = Yup.string()\n  .email('Invalid email')\n  .required('Email is required');\n\nexport const passwordSchema = Yup.string()\n  .required('Password is required')\n  .min(7, 'Password must be at least 7 characters')\n  .matches(\n    /^(?=.*[A-Za-zА-Яа-яІіЇїҐґ])(?=.*[!@#$%^&*])(?=.*[0-9]).*$/u,\n    'Password must contain at least one uppercase letter, one special character (!@#$%^&*), and one number'\n  );\n\nexport const registerValidationSchema = Yup.object().shape({\n  name: nameSchema,\n  email: emailSchema,\n  password: passwordSchema,\n});\n\nexport const loginValidationSchema = Yup.object().shape({\n  email: emailSchema,\n  password: passwordSchema,\n});\n"],"names":["Form","styled","FormikForm","Group","Field","FormikField","Label","HelperText","Button","Icon","MdLogin","dispatch","useDispatch","useState","showPassword","setShowPassword","handleSubmit","email","password","loginValidationSchema","abortEarly","logIn","inner","forEach","err","Notify","message","initialValues","onSubmit","id","type","name","placeholder","autoComplete","onMouseEnter","onMouseLeave","Wrapper","Title","Login","Helmet","nameSchema","Yup","required","matches","emailSchema","passwordSchema","min","registerValidationSchema","shape"],"sourceRoot":""}