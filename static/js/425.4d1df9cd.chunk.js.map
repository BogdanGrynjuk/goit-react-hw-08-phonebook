{"version":3,"file":"static/js/425.4d1df9cd.chunk.js","mappings":"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","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/ContactItem/ContactItem.styled.jsx","utilities/firstLetterCaps.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactsCounter/ContactsCounter.styled.jsx","components/ContactsCounter/ContactsCounter.jsx","components/PhoneBoock/PhoneBook.styled.jsx","components/PhoneBoock/PhoneBook.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter, selectIsLoading],\n  (contacts, filter, isLoading) => {\n    if (isLoading) { return [] };  \n    if (filter) {\n      return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n    };    \n    return contacts;\n  }\n);","import styled from \"@emotion/styled\";\nimport { MdClose } from \"react-icons/md\";\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;  \n`;\n\nexport const Text = styled.span`\n  font-size: 16px;\n  font-family: 'Roboto', sans-serif;  \n  text-transform: capitalize;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;  \n  border: 1px solid black;\n  border-radius: 12px;\n  cursor: pointer; \n  transition: box-shadow 250ms linear;\n  \n  &:hover {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active {\n    background-color: teal;\n    color: white;   \n  };\n\n  &:active > svg {\n    fill: white;\n  };\n`;\n\nexport const Icon = styled(MdClose)`\n  fill: red;\n  width: 16px;\n  height: 16px;\n`;","export function firstLetterCaps(string) {\n  let words = string.split(\" \");\n  let result = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let first = word.substring(0, 1).toUpperCase();\n    let leftovers = word.substring(1)\n    result += first + leftovers + \" \";\n  }; \n\n  return result;\n};","import PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\"; \nimport { Button, Contact, Icon, Text } from \"./ContactItem.styled\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { firstLetterCaps } from \"utilities\";\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  \n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    dispatch(updateFilter(\"\"));\n    Notify.info(`${firstLetterCaps(name)} successfully removed from contacts`);\n  };\n  \n  return (\n    <Contact key={id}>\n      <Text>{name}: {number}</Text>\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n        <Icon/>\n      </Button>\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,  \n};\n\nexport default ContactItem;","import styled from \"@emotion/styled\";\n\nexport const Contacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`","import { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\nimport ContactItem from '../ContactItem';\n\nimport { Contacts } from './ContactList.styled';\n\nconst ContactList = () => {\n  \n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <Contacts>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n        />\n      ))}\n    </Contacts>\n  );\n};\n\nexport default ContactList;","import styled from \"@emotion/styled\";\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n  padding: 8px;\n  border: 1px solid black;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  font-family: 'Roboto', sans-serif;  \n`;\n\nexport const Field = styled.input`\n  padding: 4px 12px;\n  width: 250px;  \n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;\n\n  &::placeholder {\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n`;","import { useDispatch, useSelector } from \"react-redux\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Field, Label } from \"./Filter.styled\";\nimport { useEffect, useRef } from \"react\";\nimport { selectContacts } from \"redux/contacts/selectors\";\n\nconst Filter = () => {  \n  const dispatch = useDispatch();\n    \n  const handleChange = (event) => {\n    dispatch(updateFilter(event.target.value));\n  };\n\n  const refFilter = useRef();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    refFilter.current.value = \"\"\n  }, [contacts]);\n\n  return (\n    <Label>\n      Find contacts by name\n      <Field\n        ref={refFilter}\n        placeholder=\"Please enter a name\"        \n        onChange={handleChange}             \n      />\n    </Label>\n  );\n};\n\nexport default Filter;","import styled from \"@emotion/styled\";\n\nexport const Text = styled.p`\n  text-align: center;\n  font-weight: bold;\n  color: rgb(255, 0, 0);\n`","import PropTypes from \"prop-types\";\nimport { Text } from \"./Message.styled\";\n\nconst Message = ({ message }) => <Text>{message}</Text>;\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Message;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex; \n  flex-direction: column;\n  gap: 8px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: white;\n`;\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  text-align: center;\n`;","import PropTypes from \"prop-types\";\nimport { Wrapper, Title } from \"./Contacts.styled\";\n\nconst Contacts = ({ children }) => {\n  return (\n    <Wrapper>\n      <Title>Contacts</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nContacts.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Contacts;","import styled from '@emotion/styled';\nimport { Field as FormikField, Form as FormikForm } from 'formik';\nimport { MdAdd } from \"react-icons/md\";\n\nexport const Form = styled(FormikForm)`\n  display: flex; \n  flex-direction: column;\n  gap: 16px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: white;  \n  font-size: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: bold;  \n`;\n\nexport const Field = styled(FormikField)`\n  padding: 4px 12px;\n  width: 250px;  \n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;\n\n  &::placeholder {\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;  \n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-left: auto;\n  padding: 4px;  \n  background-color: white;\n  border: none;\n  outline: none;  \n  font-size: 16px;\n  font-weight: normal;  \n  cursor: pointer; \n  \n  \n  &:hover > svg{\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {\n    fill: white;\n    background-color: teal;\n  }\n`;\n\nexport const Icon = styled(MdAdd)`\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  fill: blue;\n  width: 16px;\n  height: 16px;\n  transition: box-shadow 250ms linear;\n`;","import { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik } from 'formik';\n\nimport { Button, Field, Form, Icon, Label } from './ContactForm.styled';\nimport { firstLetterCaps } from \"utilities\";\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);  \n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const isDuplicateName = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n    const isDuplicateNumber = contacts.find(contact => contact.number === number);\n    \n    if (isDuplicateNumber || isDuplicateName) {     \n      <>\n        { isDuplicateName && Notify.failure(`${firstLetterCaps(name)} is already in contacts`) };      \n        { isDuplicateNumber && Notify.failure(`Phone number ${number} is already in your phone book`) };\n      </>            \n      // resetForm();\n      return; \n    };\n\n    dispatch(addContact({name, number}));\n    Notify.success(`${firstLetterCaps(name)} successfully added to contact list`);    \n    resetForm();\n  }; \n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Label>\n          Name\n          <Field id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Please enter a name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required>\n          </Field>\n        </Label>\n\n        <Label>\n          Phone number\n          <Field\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Please enter a phone number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        \n        <Button type=\"submit\">\n          Add new contact\n          <Icon />\n        </Button>\n        \n        \n      </Form>\n    </Formik>\n  );\n};\n\n\n\nexport default ContactForm;","import styled from \"@emotion/styled\";\n\nexport const Counter = styled.p`\n  text-align: end;\n  font-weight: bold;\n`","import { useSelector } from \"react-redux\";\n// import { selectContacts, selectVisibleContacts } from \"redux/selectors\";\nimport { selectContacts, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { Counter } from \"./ContactsCounter.styled\";\n\n\nexport const ContactsCounter = () => {\n\nconst countTotalContacts = useSelector(selectContacts).length;\nconst countVisibleContacts = useSelector(selectVisibleContacts).length;\n\n  return (    \n    <Counter>\n      {countTotalContacts === countVisibleContacts\n        ? `Total contacts: ${countTotalContacts}`\n        : `Found contacts: ${countVisibleContacts}/${countTotalContacts}`\n      }      \n    </Counter>\n  );\n};\n\n\nexport default ContactsCounter;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  width: 30%;  \n  padding: 16px;\n  border: 1px solid black;\n  border-radius: 4px;\n  text-align: start;\n  background-color: #ebebeb;\n  box-shadow: 0 10px 10px rgba(0, 0, 0, 0.25),\n              0 10px 10px rgba(0, 0, 0, 0.25);\n`;\n\nexport const Title = styled.h1`\n  font-size: 28px;\n  text-align: center;\n`;","import PropTypes from \"prop-types\";\nimport { Title, Wrapper } from \"./PhoneBook.styled\";\n\nconst PhoneBook = ({ children }) => {\n  return (\n    <Wrapper>\n      <Title>Phone Boock</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nPhoneBook.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default PhoneBook;","import { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  selectIsLoading,\n  selectError,\n  selectVisibleContacts,\n  selectContacts\n} from \"redux/contacts/selectors\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport Message from \"components/Message/Message\";\nimport Loader from \"components/Loader/Loader\";\nimport Contacts from \"components/Contacts/Contacts\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\n// import PhoneBook from \"components/PhoneBook/PhoneBook\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport ContactsCounter from \"components/ContactsCounter/ContactsCounter\";\n\nimport PhoneBook from \"components/PhoneBoock\";\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError); \n  const countVisibleContacts = useSelector(selectVisibleContacts).length;\n  const countContacts = useSelector(selectContacts).length;\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <PhoneBook>\n      <ContactForm />\n      <Contacts>\n        {isLoading && <Loader text={'Loading contacts...'} />}\n        {error && <Message message={error} />}\n        {!isLoading && countContacts > 1 && <Filter />}\n        {!isLoading && countContacts > 0 &&\n          <>\n            <ContactsCounter\n              visibleContacts={countVisibleContacts}\n              tatalContacts={countContacts}\n            />\n            <ContactList />\n          </>\n        }\n        {!isLoading && countContacts === 0 &&\n          <Message message=\"There are no contacts in your phone book\" />\n        }\n      </Contacts>\n    </PhoneBook>\n  );\n};"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","filter","contact","toLowerCase","includes","Contact","styled","Text","Button","Icon","MdClose","firstLetterCaps","string","words","split","result","word","substring","toUpperCase","id","number","dispatch","useDispatch","type","onClick","deleteContact","updateFilter","Notify","Contacts","visibleContacts","useSelector","Label","Field","refFilter","useRef","useEffect","current","ref","placeholder","onChange","event","target","message","Wrapper","Title","children","Form","FormikForm","FormikField","MdAdd","initialValues","onSubmit","resetForm","isDuplicateName","isDuplicateNumber","addContact","pattern","title","required","Counter","countTotalContacts","countVisibleContacts","ContactsPage","countContacts","fetchContacts","Loader","text","tatalContacts"],"sourceRoot":""}