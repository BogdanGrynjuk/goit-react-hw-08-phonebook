{"version":3,"file":"static/js/722.143e9707.chunk.js","mappings":"+OAEaA,EAAiB,SAAAC,GAC5B,OAAOA,EAAMC,SAASC,KACvB,EACYC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EACvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAGnBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACT,EAHyB,SAAAC,GAAK,OAAIA,EAAMS,MAAV,EAGAN,IAC/B,SAACF,EAAUQ,EAAQL,GACjB,OAAIA,EACK,GAELK,EACKR,EAASQ,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cADf,IAIzBX,CACR,I,qEClBUa,EAAgBC,EAAAA,EAAAA,IAAH,8KAUbC,EAAeD,EAAAA,EAAAA,IAAH,ikBA2BZE,EAASF,EAAAA,EAAAA,OAAH,saAsBNG,GAAYH,EAAAA,EAAAA,GAAOI,EAAAA,IAAPJ,CAAH,wM,UCzDhBK,EAAYC,SAASC,cAAc,eAoCzC,EAlCc,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAClBC,EAAgB,SAACC,GACF,WAAfA,EAAMC,MACRJ,GAEH,EAaD,OALAK,EAAAA,EAAAA,YAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWL,GAC5B,kBAAMI,OAAOE,oBAAoB,UAAWN,EAA5C,CACR,KAEMO,EAAAA,EAAAA,eACL,SAAClB,EAAD,CAAemB,QAZW,SAACP,GACvBA,EAAMQ,gBAAkBR,EAAMS,QAChCZ,GAEH,EAQC,UACE,UAACP,EAAD,YACE,SAACC,EAAD,CAAQgB,QAASV,EAAjB,UAA0B,SAACL,EAAD,MACzBM,OAGLJ,EAEH,E,uCClCM,SAASgB,EAAgBC,GAI9B,IAHA,IAAIC,EAAQD,EAAOE,MAAM,KACrBC,EAAS,GAEJC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAK,CACrC,IAAIE,EAAOL,EAAMG,GAGjBD,GAFYG,EAAKC,UAAU,EAAG,GAAGC,cACjBF,EAAKC,UAAU,GACD,GAC/B,CAED,OAAOJ,CACR,C,oCCRoBM,E,8DCFRC,GAAaC,GAAAA,KACvBC,SAAS,oBACTC,QACC,6JACA,8DAGSC,GAAcH,GAAAA,KACxBC,SAAS,4BACTC,QACC,6EACA,uHAGSE,GAA0BJ,GAAAA,KAAaK,MAAM,CACxD1C,KAAMoC,GACNO,OAAQH,KCdGI,IAAOxC,EAAAA,EAAAA,GAAOyC,EAAAA,GAAPzC,CAAH,yRAaJ0C,GAAQ1C,EAAAA,EAAAA,IAAH,kFAML2C,IAAQ3C,EAAAA,EAAAA,GAAO4C,EAAAA,GAAP5C,CAAH,6VAgBL6C,GAAQ7C,EAAAA,EAAAA,MAAH,kOAYL8C,GAAa9C,EAAAA,EAAAA,IAAH,4GAMVE,GAASF,EAAAA,EAAAA,OAAH,6eAwBN+C,IAAO/C,EAAAA,EAAAA,GAAOgD,EAAAA,IAAPhD,CAAH,+NCmBjB,GAvFsB,SAAC,GAAe,IAAbiD,EAAY,EAAZA,MACjBC,GAAWC,EAAAA,EAAAA,MACXjE,GAAWkE,EAAAA,EAAAA,IAAYpE,GAEvBqE,GADkBD,EAAAA,EAAAA,IAAY5D,GACGyD,GAEjCK,EAAY,mCAAG,sGAAS1D,EAAT,EAASA,KAAM2C,EAAf,EAAeA,OAAYgB,EAA3B,EAA2BA,UAA3B,kBAEXlB,GAAwBmB,SAAS,CAAE5D,KAAAA,EAAM2C,OAAAA,GAAU,CAAEkB,YAAY,IAFtD,UAGXC,EAAkBxE,EAASyE,MAAK,SAAAhE,GACpC,OAAI0D,EAAezD,KAAKC,gBAAkBD,EAAKC,eACxCF,EAAQC,KAAKC,gBAAkBD,EAAKC,aAC5C,MAEK+D,EAAoB1E,EAASyE,MAAK,SAAAhE,GACtC,OAAI0D,EAAed,SAAWA,GACvB5C,EAAQ4C,SAAWA,CAC3B,OAEwBmB,EAbR,wBAcf,WACGA,GAAmBG,EAAAA,OAAAA,QAAA,UAAkBxC,EAAgBzB,GAAlC,4BACnBgE,GAAqBC,EAAAA,OAAAA,QAAA,UAAkBtB,EAAlB,4BAhBT,2BAqBjBW,GAASY,EAAAA,EAAAA,IAAc,CAAElE,KAAAA,EAAM2C,OAAAA,EAAQwB,GAAIV,EAAeU,MAC1Db,GAASc,EAAAA,EAAAA,GAAa,KACtBH,EAAAA,OAAAA,QAAA,kBAA0BxC,EAAgBgC,EAAezD,MAAzD,0BACA2D,IAxBiB,kDA2BjB,KAAMU,MAAMC,SAAQ,SAAAC,GAClBN,EAAAA,OAAAA,QAAeM,EAAIC,QACpB,IA7BgB,0DAAH,wDAiClB,OACE,SAAC,KAAD,CACEC,cAAe,CACbzE,KAAMyD,EAAezD,KACrB2C,OAAQc,EAAed,QAEzB+B,SAAUhB,EALZ,UAOE,UAACd,GAAD,YACE,UAACE,GAAD,YACE,UAACG,GAAD,wBAEA,SAACF,GAAD,CAAOoB,GAAG,OACRQ,KAAK,OACL3E,KAAK,OACL4E,aAAa,OACbC,WAAS,QAGX,SAAC3B,GAAD,oDAGF,UAACJ,GAAD,YACE,UAACG,GAAD,gCAEA,SAACF,GAAD,CACEoB,GAAG,SACHQ,KAAK,MACL3E,KAAK,SACL4E,aAAa,YAGf,SAAC1B,GAAD,+CAGF,UAAC,GAAD,CAAQyB,KAAK,SAAb,4BAEE,SAACxB,GAAD,WAKT,E,mDHxFK2B,IAAWC,EAAAA,GAAAA,IAAJ,uLAOAC,GAAU5E,EAAAA,EAAAA,GAAH,oHAOP6E,GAAO7E,EAAAA,EAAAA,IAAH,4ZAON,SAAA8E,GACP,MAAuB,SAAnBA,EAAEC,aAAgC,iBACf,WAAnBD,EAAEC,aAAkC,sBAAxC,CACD,IACc,SAAAD,GACb,GAAuB,SAAnBA,EAAEC,cAA8C,WAAnBD,EAAEC,aACjC,MAAO,+DAEV,IACkB,SAAAD,GACjB,GAAuB,WAAnBA,EAAEC,aAA2B,MAAO,cACzC,IAUUC,GAAchF,EAAAA,EAAAA,IAAH,4HAQXiF,GAAOjF,EAAAA,EAAAA,EAAH,kQASA0E,IAKJQ,GAAclF,EAAAA,EAAAA,EAAH,+MAYXmF,GAAWnF,EAAAA,EAAAA,IAAH,kLAWRE,GAASF,EAAAA,EAAAA,OAAH,qYAmBNoF,IAAWpF,EAAAA,EAAAA,IA5GH+B,EA4GsBiB,EAAAA,IA5GR,cAAGqC,WAAH,IAAkBC,GAAlB,qBAA8B,SAACvD,GAAD,WAAeuD,GAA7C,GA4GXtF,CAAH,wRAgBRuF,GAAaH,GAASI,cAAcC,EAAAA,KI3CjD,GAxEoB,SAAC,GAAiC,IAA/B1B,EAA8B,EAA9BA,GAAInE,EAA0B,EAA1BA,KAAM2C,EAAoB,EAApBA,OAAQU,EAAY,EAAZA,MACvC,GAAsCyC,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,MAAjD,eAAOX,EAAP,KAAqBc,EAArB,KACMC,GAAUC,EAAAA,EAAAA,QAAO,MACjB7C,GAAWC,EAAAA,EAAAA,MAQX6C,EAAc,kBAAMJ,GAAgBD,EAAtB,EAWpB,OATA9E,EAAAA,EAAAA,YAAU,WACR,IAAMoF,EAAcH,EAAQI,QACxBD,EAAYE,YAAcF,EAAYG,YACxCH,EAAYI,UAAUC,IAAI,WAE1BL,EAAYI,UAAUE,OAAO,UAEhC,GAAE,CAAC3G,EAAM2C,KAGR,UAACqC,GAAD,YAEE,UAACC,GAAD,CAAME,aAAcA,EAApB,WACE,SAACC,GAAD,WACE,SAACC,GAAD,CAAMuB,IAAKV,EAAX,UACE,0BAAOlG,SAGX,SAACsF,GAAD,UAAc3C,QAGhB,UAAC4C,GAAD,YACE,SAAC,GAAD,CACEZ,KAAK,SACLrD,QAAS8E,EACTS,aAAc,kBAAMZ,EAAgB,OAAtB,EACda,aAAc,kBAAMb,EAAgB,KAAtB,EAJhB,UAME,SAACT,GAAD,CAAUuB,UAAU,iBAEtB,SAAC,GAAD,CACEpC,KAAK,SACLrD,QAxCa,WACnBgC,GAAS0D,EAAAA,EAAAA,IAAc7C,IACvBb,GAASc,EAAAA,EAAAA,GAAa,KACtBH,EAAAA,OAAAA,KAAA,UAAexC,EAAgBzB,GAA/B,uCACD,EAqCO6G,aAAc,kBAAMZ,EAAgB,SAAtB,EACda,aAAc,kBAAMb,EAAgB,KAAtB,EAJhB,UAME,SAACN,GAAD,CAAYoB,UAAU,qBAIzBhB,IACC,UAAC,EAAD,CAAOnF,QAASwF,EAAhB,WACE,0CACA,SAAC,GAAD,CAAe/C,MAAOA,SAjCdc,EAuCjB,EC1EY8C,GAAW7G,EAAAA,EAAAA,GAAH,oICsBrB,GAlBoB,WAClB,IAAM8G,GAAkB1D,EAAAA,EAAAA,IAAY5D,GAEpC,OACE,SAACqH,GAAD,UACGC,EAAgBC,KAAI,WAAuB9D,GAAvB,IAAGc,EAAH,EAAGA,GAAInE,EAAP,EAAOA,KAAM2C,EAAb,EAAaA,OAAb,OACnB,SAAC,GAAD,CAEEwB,GAAIA,EACJnE,KAAMA,EACN2C,OAAQA,EACRU,MAAOA,GAJFc,EAFY,KAW1B,ECpBYlB,GAAQ7C,EAAAA,EAAAA,MAAH,ySAcL2C,GAAQ3C,EAAAA,EAAAA,MAAH,wXCgBlB,GA1Be,WACb,IAAMkD,GAAWC,EAAAA,EAAAA,MAMX6D,GAAYjB,EAAAA,EAAAA,UACZ7G,GAAWkE,EAAAA,EAAAA,IAAYpE,GAM7B,OAJA6B,EAAAA,EAAAA,YAAU,WACRmG,EAAUd,QAAQe,MAAQ,EAC3B,GAAE,CAAC/H,KAGF,UAAC,GAAD,oCAEE,SAAC,GAAD,CACEsH,IAAKQ,EACLE,YAAY,sBACZC,SAjBe,SAACxG,GACpBuC,GAASc,EAAAA,EAAAA,GAAarD,EAAMS,OAAO6F,OACpC,MAmBF,EC5BYG,GAAOpH,EAAAA,EAAAA,EAAH,iGCOjB,GANgB,SAAC,GAAD,IAAGoE,EAAH,EAAGA,QAAH,OAAiB,SAACgD,GAAD,UAAOhD,GAAxB,E,WCDHiD,GAAUrH,EAAAA,EAAAA,IAAH,yVAgBPsH,GAAQtH,EAAAA,EAAAA,GAAH,qECFlB,GAbiB,SAAC,GAAkB,IAAhBS,EAAe,EAAfA,SAClB,OACE,UAAC4G,GAAD,YACE,SAACC,GAAD,+BACC7G,IAGN,ECNY+B,IAAOxC,EAAAA,EAAAA,GAAOyC,EAAAA,GAAPzC,CAAH,2RAaJ0C,GAAQ1C,EAAAA,EAAAA,IAAH,oFAML2C,IAAQ3C,EAAAA,EAAAA,GAAO4C,EAAAA,GAAP5C,CAAH,qcAsBL6C,GAAQ7C,EAAAA,EAAAA,MAAH,oOAYL8C,GAAa9C,EAAAA,EAAAA,IAAH,8GAMVE,GAASF,EAAAA,EAAAA,OAAH,seAyBN+C,IAAO/C,EAAAA,EAAAA,GAAOuH,EAAAA,IAAPvH,CAAH,uNCGjB,GAhFoB,WAClB,IAAMkD,GAAWC,EAAAA,EAAAA,MACXjE,GAAWkE,EAAAA,EAAAA,IAAYpE,GAEvBsE,EAAY,mCAAG,sGAAS1D,EAAT,EAASA,KAAM2C,EAAf,EAAeA,OAAYgB,EAA3B,EAA2BA,UAA3B,kBAEXlB,GAAwBmB,SAAS,CAAE5D,KAAAA,EAAM2C,OAAAA,GAAU,CAAEkB,YAAY,IAFtD,UAGXC,EAAkBxE,EAASyE,MAAK,SAAAhE,GACpC,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,aAEzC,MAEK+D,EAAoB1E,EAASyE,MAAK,SAAAhE,GACtC,OAAIA,EAAQ4C,SAAWA,CAExB,OAEwBmB,EAbR,wBAcf,WACGA,GAAmBG,EAAAA,OAAAA,QAAA,UAAkBxC,EAAgBzB,GAAlC,4BACnBgE,GAAqBC,EAAAA,OAAAA,QAAA,uBAA+BtB,EAA/B,mCAhBT,2BAqBjBW,GAASsE,EAAAA,EAAAA,IAAW,CAAE5H,KAAAA,EAAM2C,OAAAA,KAC5BsB,EAAAA,OAAAA,QAAA,UAAkBxC,EAAgBzB,GAAlC,wCACA2D,IAvBiB,kDA0BjB,KAAMU,MAAMC,SAAQ,SAAAC,GAClBN,EAAAA,OAAAA,QAAeM,EAAIC,QACpB,IA5BgB,0DAAH,wDAgClB,OACE,SAAC,KAAD,CACEC,cAAe,CACbzE,KAAM,GACN2C,OAAQ,IAEV+B,SAAUhB,EALZ,UAOE,UAAC,GAAD,YACE,UAAC,GAAD,YACE,UAAC,GAAD,mBAEA,SAAC,GAAD,CAAOS,GAAG,OACRQ,KAAK,OACL3E,KAAK,OACLsH,YAAY,sBACZ1C,aAAa,aAIf,SAAC,GAAD,oDAEF,UAAC,GAAD,YACE,UAAC,GAAD,2BAEA,SAAC,GAAD,CACET,GAAG,SACHQ,KAAK,MACL3E,KAAK,SACLsH,YAAY,8BACZ1C,aAAa,YAGf,SAAC,GAAD,+CAEF,UAAC,GAAD,CAAQD,KAAK,SAAb,6BAEE,SAAC,GAAD,WAKT,ECvFY8C,GAAUrH,EAAAA,EAAAA,IAAH,kiBAuBPsH,GAAQtH,EAAAA,EAAAA,GAAH,qEAKLyH,GAAUzH,EAAAA,EAAAA,IAAH,oPCZpB,GAfkB,SAAC,GAAkB,IAAhBS,EAAe,EAAfA,SACnB,OACE,UAAC,GAAD,YACE,SAAC,GAAD,+BACA,SAACgH,GAAD,UACGhH,MAIR,ECVYiH,GAAU1H,EAAAA,EAAAA,EAAH,oECmBpB,GAhB+B,WAE/B,IAAM2H,GAAqBvE,EAAAA,EAAAA,IAAYpE,GAAgB2C,OACjDiG,GAAuBxE,EAAAA,EAAAA,IAAY5D,GAAuBmC,OAE9D,OACE,SAAC+F,GAAD,UACGC,IAAuBC,EAAvB,0BACsBD,GADtB,0BAEsBC,EAFtB,YAE8CD,IAIpD,EChBYN,GAAUrH,EAAAA,EAAAA,IAAH,wOCSpB,GARqB,SAAC,GAAkB,IAAhBS,EAAe,EAAfA,SACtB,OAAO,SAAC,GAAD,UAAUA,GAClB,ECgBc,SAASoH,KACtB,IAAM3E,GAAWC,EAAAA,EAAAA,MACX9D,GAAY+D,EAAAA,EAAAA,IAAYhE,GACxBG,GAAQ6D,EAAAA,EAAAA,IAAY9D,GACpBsI,GAAuBxE,EAAAA,EAAAA,IAAY5D,GAAuBmC,OAC1DmG,GAAgB1E,EAAAA,EAAAA,IAAYpE,GAAgB2C,OAMlD,OAJAd,EAAAA,EAAAA,YAAU,WACRqC,GAAS6E,EAAAA,EAAAA,MACV,GAAE,CAAC7E,KAGF,UAAC,GAAD,YACE,UAAC,GAAD,YACE,SAAC,GAAD,KACE7D,GAAayI,EAAgB,IAAK,SAAC,GAAD,QAEtC,UAAC,GAAD,WACGzI,IAAa,SAAC2I,GAAA,EAAD,CAAQC,KAAM,wBAC3B1I,IAAS,SAAC,GAAD,CAAS6E,QAAS7E,KAC1BF,GAAayI,EAAgB,IAC7B,iCACE,SAAC,GAAD,CACEhB,gBAAiBc,EACjBM,cAAeJ,KAEjB,SAAC,GAAD,QAGFzI,GAA+B,IAAlByI,IACb,SAAC,GAAD,CAAS1D,QAAQ,kDAK1B,C","sources":["redux/contacts/selectors.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","utilities/firstLetterCaps.js","components/ContactItem/ContactItem.styled.jsx","validations/contactValidation.js","components/ContactEditor/ContactEditor.styled.jsx","components/ContactEditor/ContactEditor.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/PhoneBook/PhoneBook.styled.jsx","components/PhoneBook/PhoneBook.jsx","components/ContactsCounter/ContactsCounter.styled.jsx","components/ContactsCounter/ContactsCounter.jsx","components/ControlPanel/ControlPanel.styled.jsx","components/ControlPanel/ControlPanel.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => {\n  return state.contacts.items;\n};\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter, selectIsLoading],\n  (contacts, filter, isLoading) => {\n    if (isLoading) {\n      return [];\n    }\n    if (filter) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    }\n    return contacts;\n  }\n);\n","import styled from \"@emotion/styled\";\nimport { MdClose } from \"react-icons/md\";\n\nexport const ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(3px);\n`;\n\nexport const ModalContent = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  width: calc(320px - 64px);\n  padding: 16px;\n  background-color: rgb(235, 235, 235);;\n  border: 1px solid black;\n  border-radius: 4px;\n  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n              0 5px 5px rgba(0, 0, 0, 0.25);\n\n   @media screen and (min-width: 768px) {\n    width: 100%;\n    max-width: calc(768px - 64px);    \n  }\n\n  & > h1 {\n    font-size: 28px;\n    text-align: center;\n  }\n`;\n\nexport const Button = styled.button`\nposition: absolute;\n  top: 8px;\n  right: 8px;\n  display: flex;\n  align-items: center; \n  padding: 0;\n  background-color: transparent;\n  border: none;\n  outline: none;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {\n    background-color: rgb(181, 245, 254);\n  };  \n`;\n\nexport const IconClose = styled(MdClose)`  \n  width: 16px;\n  height: 16px;\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  transition: box-shadow 250ms linear;\n`;\n\n","import PropTypes from \"prop-types\";\nimport React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Button, IconClose, ModalBackdrop, ModalContent } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ onClose, children }) => {\n  const handleKeyDown = (event) => {\n    if (event.code === \"Escape\") {      \n      onClose();      \n    };\n  };  \n  \n  const handleBackdropClick = (event) => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    };\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  });\n  \n  return createPortal(\n    <ModalBackdrop onClick={handleBackdropClick}>\n      <ModalContent>\n        <Button onClick={onClose}><IconClose /></Button>\n        {children}\n      </ModalContent>\n    </ModalBackdrop>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n}\n\nexport default Modal;","export function firstLetterCaps(string) {\n  let words = string.split(\" \");\n  let result = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let first = word.substring(0, 1).toUpperCase();\n    let leftovers = word.substring(1)\n    result += first + leftovers + \" \";\n  }; \n\n  return result;\n};","import { keyframes } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { MdDeleteForever, MdEditNote } from \"react-icons/md\";\n\nconst filterProps = (Component) => ({ isEditIcon, ...props }) => <Component {...props} />;\n\nconst marquee  = keyframes`\n  0% { transform: translateX(0); }\n  50% { transform: translateX(-100%); }\n  50.01% { transform: translateX(0); }\n  100% { transform: translateX(-100%); }\n`;\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 8px;  \n`;\n\nexport const Info = styled.div`\n  flex-grow: 1;  \n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;   \n  font-family: 'Roboto', sans-serif;  \n  color: ${p => {\n    if (p.activeButton === 'edit') return 'rgb(0, 0, 255)';\n    if (p.activeButton === 'delete') return 'rgb(255, 0, 0)';\n  }};\n  text-shadow: ${p => { \n    if (p.activeButton === 'edit' || p.activeButton === 'delete') { \n      return '0 3px 3px rgba(0, 0, 0, 0.25), 0 3px 3px rgba(0, 0, 0, 0.25);'\n    }\n  }};\n  text-decoration: ${p => {\n    if (p.activeButton === 'delete') return 'line-through';\n  }};      \n  transition: color 250ms linear,\n              text-shadow 250ms linear;\n  \n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    gap: 8px;\n  } \n`;\n\nexport const NameWrapper = styled.div`\n  flex-basis: 50%;\n  overflow: hidden;\n  white-space: nowrap;\n  display: block;\n  width: 100%;\n`;\n\nexport const Name = styled.p`\n  display: flex;\n  max-width: max-content;\n  font-weight: bold;  \n  font-size: 16px;\n  text-transform: capitalize;  \n  white-space: nowrap;\n\n  &.marquee {\n    animation: ${marquee} 40s linear infinite;\n    animation-delay: 1s;\n  }\n`;\n\nexport const PhoneNumber = styled.p`\n  flex-basis: 50%;\n  font-size: 11px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  @media screen and (min-width: 768px){\n    font-size: 16px;\n  }\n`;\n\nexport const Controls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 8px;\n\n  @media screen and (min-width: 768px){\n    gap: 16px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center; \n  padding: 0;\n  background-color: rgb(255, 255, 255);\n  border: none;\n  outline: none;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };  \n\n  &:active > svg {\n    background-color: rgb(181, 245, 254);       \n  };  \n`;\n\nexport const IconEdit = styled(filterProps(MdEditNote))`\n  fill: rgb(0, 0, 255);\n  width: 16px;\n  height: 16px;\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  transition: box-shadow 250ms linear;\n  \n  &.icon_delete {\n    fill: rgb(255, 0, 0);\n  }\n\n`;\n\nexport const IconDelete = IconEdit.withComponent(MdDeleteForever);","import * as Yup from 'yup';\n\nexport const nameSchema = Yup.string()\n  .required('Name is required')\n  .matches(\n    /^[a-zA-Zа-яА-Яії]+(([' -][a-zA-Zа-яА-Яії ])?[a-zA-Zа-яА-Яії]*)*$/,\n    'Name may contain only letters, apostrophe, dash and spaces'\n  );\n\nexport const phoneSchema = Yup.string()\n  .required('Phone number is required')\n  .matches(\n    /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n    'Phone number must be between 7 and 15 digits and can contain spaces, dashes, parentheses, and an optional leading +'\n  );\n\nexport const contactValidationSchema = Yup.object().shape({\n  name: nameSchema,\n  number: phoneSchema,\n});\n","import styled from '@emotion/styled';\nimport { Field as FormikField, Form as FormikForm } from 'formik';\nimport { MdEditNote } from \"react-icons/md\";\n\nexport const Form = styled(FormikForm)`\n  display: flex; \n  flex-direction: column;\n  gap: 16px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: rgb(255, 255, 255);  \n  font-size: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: bold;  \n`;\n\nexport const Group = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const Field = styled(FormikField)`\n  padding: 4px 12px;\n  width: calc(100% - 24px);\n  max-width: 400px;  \n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;  \n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 6px;\n  \n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    justify-content: space-between;\n  }  \n`;\n\nexport const HelperText = styled.div`\n  font-size: 11px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: normal;  \n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-left: auto;\n  padding: 4px;  \n  background-color: rgb(255, 255, 255);\n  border: none;\n  outline: none;  \n  font-size: 16px;\n  font-weight: normal;  \n  cursor: pointer;  \n  \n  &:hover > svg {\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {    \n    background-color: rgb(181, 245, 254);\n  }\n`;\n\nexport const Icon = styled(MdEditNote)`\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  fill: rgb(0, 0, 255);\n  width: 16px;\n  height: 16px;\n  transition: box-shadow 250ms linear;\n`;","import PropTypes from \"prop-types\";\nimport { Formik } from 'formik';\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { firstLetterCaps } from 'utilities';\nimport { selectContacts, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { updateContact } from \"redux/contacts/operations\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { contactValidationSchema } from 'validations/contactValidation';\nimport { Button, Field, Form, Group, HelperText, Icon, Label } from './ContactEditor.styled';\n\nconst ContactEditor = ({ index }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const currentContact = visibleContacts[index]; \n  \n  const handleSubmit = async ({ name, number }, { resetForm }) => {\n    try {\n      await contactValidationSchema.validate({ name, number }, { abortEarly: false })\n      const isDuplicateName = contacts.find(contact => {\n        if (currentContact.name.toLowerCase() === name.toLowerCase()) return false;\n        return contact.name.toLowerCase() === name.toLowerCase();\n      });\n\n      const isDuplicateNumber = contacts.find(contact => {\n        if (currentContact.number === number) return false;\n        return contact.number === number;\n      });\n        \n      if (isDuplicateNumber || isDuplicateName) {\n        <>\n          {isDuplicateName && Notify.failure(`${firstLetterCaps(name)} is already in contacts`)};\n          {isDuplicateNumber && Notify.failure(`${number} is already in contacts`)};\n        </>\n        return;\n      };\n\n      dispatch(updateContact({ name, number, id: currentContact.id }));\n      dispatch(updateFilter(\"\"));\n      Notify.success(`Contact ${firstLetterCaps(currentContact.name)} successfully changed`);\n      resetForm();\n      \n    } catch (error) {\n      error.inner.forEach(err => {\n        Notify.failure(err.message);\n      });\n    }    \n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: currentContact.name,\n        number: currentContact.number,\n      }}\n      onSubmit={handleSubmit}\n    >      \n      <Form>\n        <Group>\n          <Label>\n          Edit name\n          <Field id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            autoComplete=\"name\"  \n            autoFocus            \n          />\n          </Label>\n          <HelperText>For example: Adrian, Jacob Mercer</HelperText>\n        </Group>\n\n        <Group>\n          <Label>\n          Edit phone number\n          <Field\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            autoComplete=\"tel\"  \n          />\n          </Label>\n          <HelperText>For example: +38 067 1234567</HelperText>\n        </Group>       \n               \n        <Button type=\"submit\" >\n          Change contact\n          <Icon />\n        </Button>        \n      </Form>      \n    </Formik>\n  );\n};\n\nContactEditor.propTypes = {\n  index: PropTypes.number.isRequired,\n};\n\nexport default ContactEditor;","import PropTypes from \"prop-types\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport Modal from \"components/Modal\";\nimport ContactEditor from \"components/ContactEditor\";\nimport { firstLetterCaps } from \"utilities\";\n\nimport { Button, Contact, Controls, IconDelete, IconEdit, Info, Name, NameWrapper, PhoneNumber } from \"./ContactItem.styled\";\n\nconst ContactItem = ({ id, name, number, index }) => {  \n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [activeButton, setActiveButton] = useState(null);\n  const nameRef = useRef(null);\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    dispatch(updateFilter(\"\"));\n    Notify.info(`${firstLetterCaps(name)} successfully removed from contacts`);\n  };\n\n  const toggleModal = () => setIsModalOpen(!isModalOpen);\n\n  useEffect(() => {\n    const nameElement = nameRef.current;\n    if (nameElement.scrollWidth > nameElement.clientWidth) {\n      nameElement.classList.add(\"marquee\");\n    } else {\n      nameElement.classList.remove(\"marquee\");\n    }\n  }, [name, number]);\n\n  return (\n    <Contact key={id}>\n\n      <Info activeButton={activeButton}>\n        <NameWrapper>\n          <Name ref={nameRef}>\n            <span>{name}</span>\n          </Name>\n        </NameWrapper>\n        <PhoneNumber>{number}</PhoneNumber>\n      </Info>      \n\n      <Controls>\n        <Button\n          type=\"button\"\n          onClick={toggleModal}\n          onMouseEnter={() => setActiveButton('edit')} \n          onMouseLeave={() => setActiveButton(null)}\n        >\n          <IconEdit className=\"icon_edit\" />\n        </Button>\n        <Button\n          type=\"button\"\n          onClick={handleDelete}\n          onMouseEnter={() => setActiveButton('delete')} \n          onMouseLeave={() => setActiveButton(null)}\n        >\n          <IconDelete className=\"icon_delete\"/>\n        </Button>\n      </Controls>\n      \n      {isModalOpen && (\n        <Modal onClose={toggleModal}>\n          <h1>Edit contact</h1>\n          <ContactEditor index={index} />\n        </Modal>\n      )}\n      \n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default ContactItem;","import styled from \"@emotion/styled\";\n\nexport const Contacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;","import { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\nimport ContactItem from \"components/ContactItem\";\n\nimport { Contacts } from \"./ContactList.styled\";\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n \n  return (\n    <Contacts>\n      {visibleContacts.map(({ id, name, number }, index) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          index={index}\n        />\n      ))}\n    </Contacts>\n  );\n};\n\nexport default ContactList;","import styled from \"@emotion/styled\";\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n  padding: 8px;\n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: rgb(255, 255, 255);\n  font-size: 20px;\n  font-weight: bold;\n  font-family: 'Roboto', sans-serif;  \n`;\n\nexport const Field = styled.input`\n  padding: 4px 12px;\n  width: calc(100% - 24px);\n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;\n\n  &::placeholder {\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n`;","import { useDispatch, useSelector } from \"react-redux\";\nimport { updateFilter } from \"redux/filter/filterSlice\";\nimport { Field, Label } from \"./Filter.styled\";\nimport { useEffect, useRef } from \"react\";\nimport { selectContacts } from \"redux/contacts/selectors\";\n\nconst Filter = () => {  \n  const dispatch = useDispatch();\n    \n  const handleChange = (event) => {\n    dispatch(updateFilter(event.target.value));\n  };\n\n  const refFilter = useRef();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    refFilter.current.value = \"\"\n  }, [contacts]);\n\n  return (\n    <Label>\n      Find contacts by name\n      <Field\n        ref={refFilter}\n        placeholder=\"Please enter a name\"        \n        onChange={handleChange}             \n      />\n    </Label>\n  );\n};\n\nexport default Filter;","import styled from \"@emotion/styled\";\n\nexport const Text = styled.p`\n  text-align: center;\n  font-weight: bold;\n  color: rgb(255, 0, 0);\n`","import PropTypes from \"prop-types\";\nimport { Text } from \"./Message.styled\";\n\nconst Message = ({ message }) => <Text>{message}</Text>;\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Message;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex; \n  flex-direction: column;\n  gap: 8px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: rgb(255, 255, 255);\n\n   @media screen and (min-width: 1280px) {    \n    gap: 24px;\n    width: calc(100% / 2 - 12px);\n    max-width: calc(1280px / 2 - 12px);\n  }\n`;\n\nexport const Title = styled.h2`\n  font-size: 20px;\n  text-align: center;\n`;","import PropTypes from \"prop-types\";\nimport { Wrapper, Title } from \"./Contacts.styled\";\n\nconst Contacts = ({ children }) => {\n  return (\n    <Wrapper>\n      <Title>List of contacts</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nContacts.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Contacts;","import styled from '@emotion/styled';\nimport { Field as FormikField, Form as FormikForm } from 'formik';\nimport { MdAdd } from \"react-icons/md\";\n\nexport const Form = styled(FormikForm)`\n  display: flex; \n  flex-direction: column;\n  gap: 16px;  \n  padding: 8px;  \n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: rgb(255, 255, 255);  \n  font-size: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: bold;  \n`;\n\nexport const Group = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const Field = styled(FormikField)`\n  padding: 4px 12px;\n  width: calc(100% - 24px);\n  max-width: 400px;\n  border: 1px solid black;\n  border-radius: 12px;\n  transition: box-shadow 250ms linear;  \n\n  &:hover,\n  &:focus {\n    outline: none;    \n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);    \n  };\n\n  @media screen and (min-width: 768px) {\n    &::placeholder{\n      text-align: center;\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 6px;\n  \n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    justify-content: space-between;\n  }  \n`;\n\nexport const HelperText = styled.div`\n  font-size: 11px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: normal;  \n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-left: auto;\n  padding: 4px;  \n  background-color: transparent;\n  border: none;\n  outline: none;  \n  font-size: 16px;\n  font-weight: normal;  \n  cursor: pointer; \n  \n  \n  &:hover > svg{\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.25),\n                0 5px 5px rgba(0, 0, 0, 0.25);\n  };\n\n  &:active > svg {\n    background-color: rgb(181, 245, 254);\n  }\n`;\n\nexport const Icon = styled(MdAdd)`\n  padding: 4px;\n  border: 1px solid black;\n  border-radius: 50%;\n  background-color: buttonface;\n  fill: blue;\n  width: 16px;\n  height: 16px;\n  transition: box-shadow 250ms linear;\n`;","import { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik } from 'formik';\n\nimport { Button, Field, Form, Group, HelperText, Icon, Label } from './ContactForm.styled';\nimport { firstLetterCaps } from \"utilities\";\nimport { contactValidationSchema } from 'validations/contactValidation';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);  \n\n  const handleSubmit = async ({ name, number }, { resetForm }) => {\n    try {\n      await contactValidationSchema.validate({ name, number }, { abortEarly: false })\n      const isDuplicateName = contacts.find(contact => {\n        if (contact.name.toLowerCase() === name.toLowerCase()) return true;\n        return false;\n      });\n    \n      const isDuplicateNumber = contacts.find(contact => {\n        if (contact.number === number) return true;\n        return false;\n      });\n    \n      if (isDuplicateNumber || isDuplicateName) {\n        <>\n          {isDuplicateName && Notify.failure(`${firstLetterCaps(name)} is already in contacts`)};\n          {isDuplicateNumber && Notify.failure(`Phone number ${number} is already in your phone book`)};\n        </>\n        return;\n      };\n\n      dispatch(addContact({ name, number }));\n      Notify.success(`${firstLetterCaps(name)} successfully added to contact list`);\n      resetForm();\n      \n    } catch (error) {\n      error.inner.forEach(err => {\n        Notify.failure(err.message);\n      });\n    }\n  }; \n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Group>\n          <Label>\n          Name\n          <Field id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Please enter a name\"\n            autoComplete=\"name\"  \n          >\n          </Field>\n        </Label>\n          <HelperText>For example: Adrian, Jacob Mercer</HelperText>\n        </Group>\n        <Group>\n          <Label>\n          Phone number\n          <Field\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Please enter a phone number\"\n            autoComplete=\"tel\" \n          />\n        </Label>\n          <HelperText>For example: +38 067 1234567</HelperText>\n        </Group>        \n        <Button type=\"submit\">\n          Add new contact\n          <Icon />\n        </Button>       \n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-width: calc(320px - 64px);  \n  padding: 16px;\n  border: 1px solid black;\n  border-radius: 4px;\n  text-align: start;\n  background-color: rgb(235, 235, 235);\n  box-shadow: 0 10px 10px rgba(0, 0, 0, 0.25),\n              0 10px 10px rgba(0, 0, 0, 0.25);\n\n  @media screen and (min-width: 768px) {\n    width: 100%;\n    max-width: calc(768px - 64px);    \n  }\n\n  @media screen and (min-width: 1280px) {    \n    max-width: calc(100% - 32px); \n  }\n`;\n\nexport const Title = styled.h1`\n  font-size: 28px;\n  text-align: center;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n\n   @media screen and (min-width: 1280px) {    \n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 24px;\n  }\n\n`;","import PropTypes from \"prop-types\";\nimport { Content, Title, Wrapper } from \"./PhoneBook.styled\";\n\nconst PhoneBook = ({ children }) => {\n  return (\n    <Wrapper>\n      <Title>Your Phone Book</Title>\n      <Content>\n        {children}\n      </Content>\n    </Wrapper>\n  );\n};\n\nPhoneBook.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default PhoneBook;","import styled from \"@emotion/styled\";\n\nexport const Counter = styled.p`\n  text-align: end;\n  font-weight: bold;\n`","import { useSelector } from \"react-redux\";\nimport { selectContacts, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { Counter } from \"./ContactsCounter.styled\";\n\n\nexport const ContactsCounter = () => {\n\nconst countTotalContacts = useSelector(selectContacts).length;\nconst countVisibleContacts = useSelector(selectVisibleContacts).length;\n\n  return (    \n    <Counter>\n      {countTotalContacts === countVisibleContacts\n        ? `Total contacts: ${countTotalContacts}`\n        : `Found contacts: ${countVisibleContacts}/${countTotalContacts}`\n      }      \n    </Counter>\n  );\n};\n\n\nexport default ContactsCounter;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n \n  @media screen and (min-width: 1280px) {    \n    gap: 24px;\n    width: calc(100% / 2 - 12px);\n    max-width: calc(1280px / 2 - 12px);\n  }\n`;","import PropTypes from 'prop-types';\nimport { Wrapper } from './ControlPanel.styled';\n\nconst ControlPanel = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n\nControlPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ControlPanel;","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport {\n  selectIsLoading,\n  selectError,\n  selectVisibleContacts,\n  selectContacts\n} from \"redux/contacts/selectors\";\n\nimport ContactList from \"components/ContactList\";\nimport Filter from \"components/Filter\";\nimport Message from \"components/Message\";\nimport Loader from \"components/Loader\";\nimport Contacts from \"components/Contacts\";\nimport ContactForm from \"components/ContactForm\";\nimport PhoneBook from \"components/PhoneBook\";\nimport ContactsCounter from \"components/ContactsCounter\";\nimport ControlPanel from \"components/ControlPanel\";\n\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError); \n  const countVisibleContacts = useSelector(selectVisibleContacts).length;\n  const countContacts = useSelector(selectContacts).length;\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <PhoneBook>\n      <ControlPanel>\n        <ContactForm />\n        {!isLoading && countContacts > 1 && <Filter />}\n      </ControlPanel>\n      <Contacts>\n        {isLoading && <Loader text={'Loading contacts...'} />}\n        {error && <Message message={error} />}\n        {!isLoading && countContacts > 0 &&\n          <>\n            <ContactsCounter\n              visibleContacts={countVisibleContacts}\n              tatalContacts={countContacts}\n            />\n            <ContactList />\n          </>\n        }\n        {!isLoading && countContacts === 0 &&\n          <Message message=\"There are no contacts in your phone book\" />\n        }\n      </Contacts>\n    </PhoneBook>\n  );\n};"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","ModalBackdrop","styled","ModalContent","Button","IconClose","MdClose","modalRoot","document","querySelector","onClose","children","handleKeyDown","event","code","useEffect","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","firstLetterCaps","string","words","split","result","i","length","word","substring","toUpperCase","Component","nameSchema","Yup","required","matches","phoneSchema","contactValidationSchema","shape","number","Form","FormikForm","Group","Field","FormikField","Label","HelperText","Icon","MdEditNote","index","dispatch","useDispatch","useSelector","currentContact","handleSubmit","resetForm","validate","abortEarly","isDuplicateName","find","isDuplicateNumber","Notify","updateContact","id","updateFilter","inner","forEach","err","message","initialValues","onSubmit","type","autoComplete","autoFocus","marquee","keyframes","Contact","Info","p","activeButton","NameWrapper","Name","PhoneNumber","Controls","IconEdit","isEditIcon","props","IconDelete","withComponent","MdDeleteForever","useState","isModalOpen","setIsModalOpen","setActiveButton","nameRef","useRef","toggleModal","nameElement","current","scrollWidth","clientWidth","classList","add","remove","ref","onMouseEnter","onMouseLeave","className","deleteContact","Contacts","visibleContacts","map","refFilter","value","placeholder","onChange","Text","Wrapper","Title","MdAdd","addContact","Content","Counter","countTotalContacts","countVisibleContacts","ContactsPage","countContacts","fetchContacts","Loader","text","tatalContacts"],"sourceRoot":""}